'use client';

import type React from 'react';
import { useState } from 'react';

import {
  AlertTriangle,
  ArrowUp,
  Briefcase,
  Building,
  CheckCircle,
  Dumbbell,
  GraduationCap,
  Loader2,
  Users,
} from 'lucide-react';

import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from '@/hooks/use-toast';

// Facility type
type Facility = {
  id: string;
  name: string;
  description: string;
  level: number;
  maxLevel: number;
  benefits: string[];
  upgradeCost: number;
  upgradeTime: number; // in days
  upgradeInProgress: boolean;
  upgradeCompletionDate?: string;
  icon: React.ReactNode;
};

export default function YouthFacilities() {
  // Mock facilities data
  const [facilities, setFacilities] = useState<Facility[]>([
    {
      id: 'training_facilities',
      name: 'Training Facilities',
      description:
        'The quality of your youth training facilities affects how quickly young players develop.',
      level: 2,
      maxLevel: 5,
      benefits: [
        'Improved training effectiveness',
        'Faster player development',
        'Better injury prevention',
        'Increased player happiness',
      ],
      upgradeCost: 250000,
      upgradeTime: 60,
      upgradeInProgress: false,
      icon: <Dumbbell className="h-6 w-6" />,
    },
    {
      id: 'youth_academy',
      name: 'Youth Academy',
      description:
        'The quality of your youth academy affects the potential of youth players generated by your club.',
      level: 2,
      maxLevel: 5,
      benefits: [
        'Higher quality youth intakes',
        'More youth players per intake',
        'Higher potential youth players',
        'Better youth coaching',
      ],
      upgradeCost: 300000,
      upgradeTime: 90,
      upgradeInProgress: false,
      icon: <GraduationCap className="h-6 w-6" />,
    },
    {
      id: 'youth_recruitment',
      name: 'Youth Recruitment',
      description:
        'The quality of your youth recruitment network affects how many young players you can discover.',
      level: 1,
      maxLevel: 5,
      benefits: [
        'Wider scouting network',
        'More youth players discovered',
        'Better quality youth players found',
        'Access to more regions',
      ],
      upgradeCost: 200000,
      upgradeTime: 45,
      upgradeInProgress: false,
      icon: <Users className="h-6 w-6" />,
    },
    {
      id: 'youth_coaching',
      name: 'Youth Coaching',
      description:
        'The quality of your youth coaching staff affects how effectively young players develop.',
      level: 2,
      maxLevel: 5,
      benefits: [
        'Better youth player development',
        'More effective training sessions',
        'Improved player mentoring',
        'Better personality development',
      ],
      upgradeCost: 150000,
      upgradeTime: 30,
      upgradeInProgress: false,
      icon: <Briefcase className="h-6 w-6" />,
    },
    {
      id: 'youth_accommodation',
      name: 'Youth Accommodation',
      description:
        'The quality of your youth accommodation affects player happiness and ability to attract talent.',
      level: 1,
      maxLevel: 5,
      benefits: [
        'Increased player happiness',
        'Better ability to attract talent',
        'Improved player retention',
        'Enhanced club reputation',
      ],
      upgradeCost: 180000,
      upgradeTime: 75,
      upgradeInProgress: false,
      icon: <Building className="h-6 w-6" />,
    },
  ]);

  const [selectedFacility, setSelectedFacility] = useState<Facility | null>(
    null
  );
  const [upgradeDialogOpen, setUpgradeDialogOpen] = useState(false);
  const [isUpgrading, setIsUpgrading] = useState(false);
  const [upgradeComplete, setUpgradeComplete] = useState(false);
  const [activeTab, setActiveTab] = useState('all');

  // Handle facility upgrade
  const handleUpgradeFacility = (facility: Facility) => {
    setSelectedFacility(facility);
    setUpgradeComplete(false);
    setUpgradeDialogOpen(true);
  };

  // Confirm facility upgrade
  const confirmUpgrade = () => {
    if (!selectedFacility) return;

    setIsUpgrading(true);

    // Simulate loading time
    setTimeout(() => {
      // Update facility
      const updatedFacilities = facilities.map((facility) => {
        if (facility.id === selectedFacility.id) {
          const completionDate = new Date();
          completionDate.setDate(
            completionDate.getDate() + facility.upgradeTime
          );

          return {
            ...facility,
            upgradeInProgress: true,
            upgradeCompletionDate: completionDate.toISOString(),
          };
        }
        return facility;
      });

      setFacilities(updatedFacilities);
      setIsUpgrading(false);
      setUpgradeComplete(true);

      toast({
        title: 'Upgrade Started',
        description: `Upgrade of ${selectedFacility.name} has begun and will be completed in ${selectedFacility.upgradeTime} days.`,
      });
    }, 2000);
  };

  // Get level badge
  const getLevelBadge = (level: number) => {
    switch (level) {
      case 1:
        return <Badge className="bg-red-500">Basic</Badge>;
      case 2:
        return <Badge className="bg-amber-500">Adequate</Badge>;
      case 3:
        return <Badge className="bg-blue-500">Good</Badge>;
      case 4:
        return <Badge className="bg-green-500">Excellent</Badge>;
      case 5:
        return <Badge className="bg-purple-500">State of the Art</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  // Get days remaining for upgrade
  const getDaysRemaining = (completionDate?: string) => {
    if (!completionDate) return 'Unknown';

    const completion = new Date(completionDate);
    const now = new Date();
    const daysRemaining = Math.ceil(
      (completion.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)
    );

    return daysRemaining > 0
      ? `${daysRemaining} days remaining`
      : 'Completing today';
  };

  // Filter facilities based on active tab
  const filteredFacilities = facilities.filter((facility) => {
    if (activeTab === 'upgrading') {
      return facility.upgradeInProgress;
    }
    return true;
  });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="w-full md:w-auto"
        >
          <TabsList>
            <TabsTrigger value="all">All Facilities</TabsTrigger>
            <TabsTrigger value="upgrading">
              Upgrading ({facilities.filter((f) => f.upgradeInProgress).length})
            </TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {filteredFacilities.map((facility) => (
          <Card
            key={facility.id}
            className={facility.upgradeInProgress ? 'border-blue-500/50' : ''}
          >
            <CardHeader className="pb-2">
              <div className="flex justify-between">
                <CardTitle className="flex items-center">
                  <div className="mr-2 p-2 rounded-full bg-primary/10">
                    {facility.icon}
                  </div>
                  <span>{facility.name}</span>
                </CardTitle>
                <div>{getLevelBadge(facility.level)}</div>
              </div>
              <CardDescription>{facility.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between mb-1 text-sm">
                    <span>Current Level</span>
                    <span>
                      {facility.level} / {facility.maxLevel}
                    </span>
                  </div>
                  <Progress
                    value={(facility.level / facility.maxLevel) * 100}
                    className="h-2"
                  />
                </div>

                {facility.upgradeInProgress &&
                  facility.upgradeCompletionDate && (
                    <div className="p-3 bg-blue-50 border border-blue-200 rounded-md">
                      <div className="flex items-start">
                        <Loader2 className="h-5 w-5 text-blue-600 mr-2 mt-0.5 animate-spin" />
                        <div>
                          <h4 className="font-medium text-blue-800 mb-1">
                            Upgrade in Progress
                          </h4>
                          <p className="text-sm text-blue-700">
                            Upgrading to Level {facility.level + 1}.{' '}
                            {getDaysRemaining(facility.upgradeCompletionDate)}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                {!facility.upgradeInProgress && (
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium">Benefits</h4>
                    <ul className="text-sm space-y-1">
                      {facility.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start">
                          <span className="mr-2">â€¢</span>
                          <span>{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </CardContent>
            <CardFooter>
              {facility.upgradeInProgress ? (
                <Button variant="outline" className="w-full" disabled>
                  Upgrade in Progress
                </Button>
              ) : facility.level === facility.maxLevel ? (
                <Button variant="outline" className="w-full" disabled>
                  Maximum Level Reached
                </Button>
              ) : (
                <Button
                  className="w-full"
                  onClick={() => handleUpgradeFacility(facility)}
                >
                  <ArrowUp className="mr-2 h-4 w-4" />
                  Upgrade to Level {facility.level + 1} (Â£
                  {facility.upgradeCost.toLocaleString()})
                </Button>
              )}
            </CardFooter>
          </Card>
        ))}
      </div>

      {/* Upgrade Dialog */}
      <Dialog open={upgradeDialogOpen} onOpenChange={setUpgradeDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upgrade Facility</DialogTitle>
            <DialogDescription>
              {selectedFacility &&
                `Upgrade ${selectedFacility.name} from Level ${selectedFacility.level} to Level ${selectedFacility.level + 1}`}
            </DialogDescription>
          </DialogHeader>

          {selectedFacility && (
            <div className="py-4">
              {upgradeComplete ? (
                <div className="p-4 bg-green-50 border border-green-200 rounded-md text-center">
                  <CheckCircle className="h-8 w-8 mx-auto text-green-600 mb-2" />
                  <h3 className="font-bold text-lg text-green-800">
                    Upgrade Started
                  </h3>
                  <p className="text-green-700">
                    The upgrade of {selectedFacility.name} has begun and will be
                    completed in {selectedFacility.upgradeTime} days.
                  </p>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="p-4 border rounded-md">
                    <h4 className="font-medium mb-2">Upgrade Details</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">
                          Current Level:
                        </span>
                        <span className="font-medium">
                          {selectedFacility.level} (
                          {getLevelBadge(selectedFacility.level)})
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">
                          New Level:
                        </span>
                        <span className="font-medium">
                          {selectedFacility.level + 1} (
                          {getLevelBadge(selectedFacility.level + 1)})
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">
                          Upgrade Cost:
                        </span>
                        <span className="font-medium">
                          Â£{selectedFacility.upgradeCost.toLocaleString()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">
                          Upgrade Time:
                        </span>
                        <span className="font-medium">
                          {selectedFacility.upgradeTime} days
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 border rounded-md">
                    <h4 className="font-medium mb-2">
                      New Benefits at Level {selectedFacility.level + 1}
                    </h4>
                    <ul className="text-sm space-y-1">
                      {selectedFacility.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start">
                          <span className="mr-2">â€¢</span>
                          <span>
                            {benefit}{' '}
                            {index === 0
                              ? '(+20%)'
                              : index === 1
                                ? '(+15%)'
                                : '(+10%)'}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="p-4 bg-amber-50 border border-amber-200 rounded-md">
                    <div className="flex items-start">
                      <AlertTriangle className="h-5 w-5 text-amber-600 mr-2 mt-0.5" />
                      <div>
                        <h4 className="font-medium text-amber-800 mb-1">
                          Upgrade Information
                        </h4>
                        <p className="text-sm text-amber-700">
                          This upgrade will cost Â£
                          {selectedFacility.upgradeCost.toLocaleString()} from
                          your facilities budget. The upgrade will take{' '}
                          {selectedFacility.upgradeTime} days to complete.
                          During this time, the facility will continue to
                          function at its current level.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          <DialogFooter>
            {upgradeComplete ? (
              <Button onClick={() => setUpgradeDialogOpen(false)}>Close</Button>
            ) : (
              <>
                <Button
                  variant="outline"
                  onClick={() => setUpgradeDialogOpen(false)}
                >
                  Cancel
                </Button>
                {isUpgrading ? (
                  <Button disabled>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </Button>
                ) : (
                  <Button onClick={confirmUpgrade}>Confirm Upgrade</Button>
                )}
              </>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Facilities Budget</CardTitle>
            <CardDescription>
              Annual allocation for youth facilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Annual Budget</span>
                  <span className="font-medium">Â£1,000,000</span>
                </div>
                <Progress value={100} className="h-2" />
              </div>

              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Used This Year</span>
                  <span className="font-medium">
                    Â£
                    {facilities
                      .filter((f) => f.upgradeInProgress)
                      .reduce((sum, f) => sum + f.upgradeCost, 0)
                      .toLocaleString()}
                  </span>
                </div>
                <Progress
                  value={
                    (facilities
                      .filter((f) => f.upgradeInProgress)
                      .reduce((sum, f) => sum + f.upgradeCost, 0) /
                      1000000) *
                    100
                  }
                  className="h-2"
                />
              </div>

              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Remaining Budget</span>
                  <span className="font-medium">
                    Â£
                    {(
                      1000000 -
                      facilities
                        .filter((f) => f.upgradeInProgress)
                        .reduce((sum, f) => sum + f.upgradeCost, 0)
                    ).toLocaleString()}
                  </span>
                </div>
                <Progress
                  value={
                    (1 -
                      facilities
                        .filter((f) => f.upgradeInProgress)
                        .reduce((sum, f) => sum + f.upgradeCost, 0) /
                        1000000) *
                    100
                  }
                  className="h-2"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Facility Levels</CardTitle>
            <CardDescription>
              Current youth development infrastructure
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Badge className="bg-amber-500 mr-2">Level 2</Badge>
                  <span>Training Facilities</span>
                </div>
                <span className="font-medium">Adequate</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Badge className="bg-amber-500 mr-2">Level 2</Badge>
                  <span>Youth Academy</span>
                </div>
                <span className="font-medium">Adequate</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Badge className="bg-red-500 mr-2">Level 1</Badge>
                  <span>Youth Recruitment</span>
                </div>
                <span className="font-medium">Basic</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Badge className="bg-amber-500 mr-2">Level 2</Badge>
                  <span>Youth Coaching</span>
                </div>
                <span className="font-medium">Adequate</span>
              </div>
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Badge className="bg-red-500 mr-2">Level 1</Badge>
                  <span>Youth Accommodation</span>
                </div>
                <span className="font-medium">Basic</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Upgrade Status</CardTitle>
            <CardDescription>Current facility improvements</CardDescription>
          </CardHeader>
          <CardContent>
            {facilities.filter((f) => f.upgradeInProgress).length > 0 ? (
              <div className="space-y-3">
                {facilities
                  .filter((f) => f.upgradeInProgress)
                  .map((facility) => (
                    <div key={facility.id} className="p-3 border rounded-md">
                      <div className="flex justify-between items-center mb-2">
                        <div className="font-medium">{facility.name}</div>
                        <Badge className="bg-blue-500">In Progress</Badge>
                      </div>
                      <div className="space-y-2">
                        <div className="text-sm text-muted-foreground">
                          Upgrading to Level {facility.level + 1}
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>Progress:</span>
                          <span>
                            {facility.upgradeCompletionDate
                              ? getDaysRemaining(facility.upgradeCompletionDate)
                              : 'Unknown'}
                          </span>
                        </div>
                        <Progress
                          value={
                            facility.upgradeCompletionDate
                              ? 100 -
                                (Math.ceil(
                                  (new Date(
                                    facility.upgradeCompletionDate
                                  ).getTime() -
                                    new Date().getTime()) /
                                    (1000 * 60 * 60 * 24)
                                ) /
                                  facility.upgradeTime) *
                                  100
                              : 0
                          }
                          className="h-2"
                        />
                      </div>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground">
                No facility upgrades in progress
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
